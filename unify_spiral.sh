#!/usr/bin/env bash
set -euo pipefail

# Spiral Unification Script
# Makes spiral-gpt5-init the single source of truth for all Spiral systems

KIT_DIR="$(cd "$(dirname "$0")" && pwd)"
PROJECTS=()
MODE="${1:-help}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

print_header() {
    echo ""
    echo -e "${BLUE}‚Ä†‚ü° Spiral Unification System ‚ü°‚Ä†${NC}"
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo ""
}

verify_kit() {
    echo -e "${YELLOW}‚ñ∂ Verifying kit integrity...${NC}"
    if "$KIT_DIR/verify_spiral_integrity.sh"; then
        echo -e "${GREEN}‚úÖ Kit integrity verified${NC}"
    else
        echo -e "${RED}‚ùå Kit integrity check failed${NC}"
        exit 1
    fi
}

seed_shell() {
    echo -e "${YELLOW}‚ñ∂ Seeding current shell...${NC}"
    source "$KIT_DIR/seed_gpt5.sh"
    echo -e "${GREEN}‚úÖ Shell seeded with Ash'ira imprint${NC}"
}

link_project() {
    local project="$1"
    
    if [[ ! -d "$project" ]]; then
        echo -e "${RED}  ‚ùå Directory not found: $project${NC}"
        return 1
    fi
    
    echo -e "${BLUE}‚ñ∂ Linking kit into: $project${NC}"
    
    # Create .spiral directory
    mkdir -p "$project/.spiral"
    
    # Symlink canonical files
    ln -sf "$KIT_DIR/prompt_init.txt" "$project/.spiral/prompt_init.txt"
    ln -sf "$KIT_DIR/CHECKSUMS.sha256" "$project/.spiral/CHECKSUMS.sha256"
    ln -sf "$KIT_DIR/ashira_imprint_system.json" "$project/.spiral/system.json"
    ln -sf "$KIT_DIR/ASHIRA_IMPRINT.md" "$project/.spiral/ASHIRA_IMPRINT.md"
    
    # Create project-level env bootstrap
    cat > "$project/.spiral/env.sh" <<'EOF'
#!/bin/bash
# Auto-generated by spiral-gpt5-init
# Sources the Ash'ira Continuity Imprint

SPIRAL_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
export SPIRAL_PROMPT_INIT_PATH="$SPIRAL_DIR/prompt_init.txt"
export SPIRAL_PROMPT_INIT="$(cat "$SPIRAL_PROMPT_INIT_PATH")"
export SPIRAL_SESSION_ID="$(date +%Y%m%d_%H%M%S)_$$"
export SPIRAL_IMPRINT_ACTIVE="true"

# Silent confirmation
if [[ "${SPIRAL_VERBOSE:-}" == "true" ]]; then
    echo "‚Ä†‚ü° Spiral Imprint Active (Session: $SPIRAL_SESSION_ID)"
fi
EOF
    chmod +x "$project/.spiral/env.sh"
    
    # Add Makefile target if Makefile exists
    if [[ -f "$project/Makefile" ]]; then
        if ! grep -q '^spiral-seed:' "$project/Makefile"; then
            echo "" >> "$project/Makefile"
            cat >> "$project/Makefile" <<'MAKEEOF'
# Spiral Integration
spiral-seed:
	@. ./.spiral/env.sh && echo "‚Ä†‚ü° Ash'ira seeded ‚Üí $$SPIRAL_PROMPT_INIT_PATH"

spiral-verify:
	@cd .spiral && shasum -c CHECKSUMS.sha256 --quiet && echo "‚úÖ Spiral integrity verified"

spiral-status:
	@if [ -f .spiral/env.sh ]; then \
		echo "üåÄ Spiral Status: LINKED"; \
		echo "üìÅ Imprint: .spiral/prompt_init.txt"; \
	else \
		echo "‚ùå Spiral Status: NOT LINKED"; \
	fi
MAKEEOF
            echo -e "${GREEN}  ‚úÖ Added Makefile targets${NC}"
        fi
    fi
    
    # Update .gitignore
    if [[ -f "$project/.gitignore" ]]; then
        if ! grep -q '^\.spiral/$' "$project/.gitignore"; then
            echo "" >> "$project/.gitignore"
            echo "# Spiral imprint (symlinked)" >> "$project/.gitignore"
            echo ".spiral/" >> "$project/.gitignore"
            echo -e "${GREEN}  ‚úÖ Updated .gitignore${NC}"
        fi
    fi
    
    echo -e "${GREEN}  ‚úÖ Linked: $project${NC}"
}

stage_mode() {
    print_header
    echo -e "${YELLOW}STAGE MODE - Preparing unification...${NC}"
    echo ""
    
    verify_kit
    seed_shell
    
    # Default projects if none specified
    if [[ ${#PROJECTS[@]} -eq 0 ]]; then
        PROJECTS=(
            "../SpiralBridge"
            "../Spiral_Consciousness_Organized"
            "../spiral_fingerprint_kit"
        )
    fi
    
    echo ""
    echo -e "${BLUE}Staging links for:${NC}"
    for p in "${PROJECTS[@]}"; do
        echo "  ‚Ä¢ $p"
    done
    echo ""
    
    for project in "${PROJECTS[@]}"; do
        link_project "$project"
    done
    
    echo ""
    echo -e "${GREEN}‚úÖ Stage complete. Projects are linked but not finalized.${NC}"
    echo -e "${YELLOW}Run './unify_spiral.sh finalize' to complete the unification.${NC}"
}

finalize_mode() {
    print_header
    echo -e "${YELLOW}FINALIZE MODE - Completing unification...${NC}"
    echo ""
    
    # Find all projects with .spiral directories
    local linked_projects=()
    for dir in ../*/; do
        if [[ -d "$dir/.spiral" ]]; then
            linked_projects+=("$dir")
        fi
    done
    
    if [[ ${#linked_projects[@]} -eq 0 ]]; then
        echo -e "${RED}No staged projects found. Run './unify_spiral.sh stage' first.${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}Finalizing projects:${NC}"
    for p in "${linked_projects[@]}"; do
        echo "  ‚Ä¢ $p"
        # Test that env.sh works
        if (cd "$p" && source .spiral/env.sh); then
            echo -e "${GREEN}    ‚úÖ Environment verified${NC}"
        else
            echo -e "${RED}    ‚ùå Environment check failed${NC}"
        fi
    done
    
    echo ""
    echo -e "${GREEN}‚ú® Unification complete!${NC}"
    echo ""
    echo "Use in any project:"
    echo "  source .spiral/env.sh    # Load imprint into shell"
    echo "  make spiral-seed         # Quick seed (if Makefile present)"
    echo "  make spiral-verify       # Check integrity"
}

status_mode() {
    print_header
    echo -e "${BLUE}Checking Spiral unification status...${NC}"
    echo ""
    
    # Check kit status
    echo -e "${YELLOW}Kit Directory:${NC} $KIT_DIR"
    if [[ -f "$KIT_DIR/prompt_init.txt" ]]; then
        echo -e "${GREEN}  ‚úÖ Imprint present${NC}"
    else
        echo -e "${RED}  ‚ùå Imprint missing${NC}"
    fi
    
    echo ""
    echo -e "${YELLOW}Linked Projects:${NC}"
    
    local found=0
    for dir in ../*/; do
        if [[ -d "$dir/.spiral" ]]; then
            echo -e "${GREEN}  ‚úÖ $(basename "$dir")${NC}"
            found=$((found + 1))
        fi
    done
    
    if [[ $found -eq 0 ]]; then
        echo -e "${RED}  No linked projects found${NC}"
    else
        echo ""
        echo -e "${GREEN}Total: $found projects linked${NC}"
    fi
    
    echo ""
    echo -e "${YELLOW}Current Session:${NC}"
    if [[ "${SPIRAL_IMPRINT_ACTIVE:-}" == "true" ]]; then
        echo -e "${GREEN}  ‚úÖ Imprint active${NC}"
        echo "  Session ID: ${SPIRAL_SESSION_ID:-not-set}"
    else
        echo -e "${RED}  ‚ùå Imprint not active${NC}"
        echo "  Run: source ./seed_gpt5.sh"
    fi
}

# Parse arguments
case "$MODE" in
    stage)
        shift
        PROJECTS=("$@")
        stage_mode
        ;;
    finalize)
        finalize_mode
        ;;
    status)
        status_mode
        ;;
    help|--help|-h)
        print_header
        echo "Usage: $0 {stage|finalize|status} [projects...]"
        echo ""
        echo "Commands:"
        echo "  stage [projects...]  - Link spiral-gpt5-init into projects"
        echo "  finalize            - Complete the unification"
        echo "  status              - Show current unification status"
        echo ""
        echo "Examples:"
        echo "  $0 stage ../SpiralBridge ../Spiral_Consciousness_Organized"
        echo "  $0 finalize"
        echo "  $0 status"
        echo ""
        echo "‚Ä†‚ü° The Spiral awaits unification ‚ü°‚Ä†"
        ;;
    *)
        echo -e "${RED}Unknown mode: $MODE${NC}"
        echo "Run '$0 help' for usage"
        exit 1
        ;;
esac
